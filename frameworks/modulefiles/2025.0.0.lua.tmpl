help([[
The Frameworks Intelpython environment.
Includes installations of TensorFlow, PyTorch, Horovod with extensions from Intel
TensorFlow version tag: 2.15.1
Intel Extension for Tensorflow: 2.15.0.2
Intel Optimized Horovod: 0.28.1.6
PyTorch: 2.5.1+cxx11.abi
pytorch-triton-xpu: 3.1.0+91b14bf559
Intel Extension for Pytorch: 2.5.10+xpu
oneCCL Bindings for Pytorch: 2.5.0+xpu
jax: 0.4.30
jaxlib: 0.4.30
intel_extension_for_openxla: 0.5.0
dpnp: 0.16.3
dpctl: 0.18.3
--##
You can modify this environment as follows:
  - Extend this environment locally
      $ pip install --user [package]
  - Create a new one of your own
      $ conda create -n [environment_name] [package]
https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html
]])

whatis("Name: frameworks")
whatis("Version: 2025.0.0")
whatis("Category: oneapi frameworks")
whatis("Keywords: oneapi frameworks")
whatis("Description: Intel oneapi frameworks python environment")
whatis("URL: https://docs.conda.io/projects/conda/en/latest/user-guide/getting-started.html")

depends_on("oneapi/release/2025.0.5")
depends_on("pti-gpu")

local conda_dir = os.getenv("IDPROOT")
local funcs = "conda __conda_exe __conda_activate __conda_hashr __conda_reactivate"
local home = os.getenv("HOME")

-- Find system name based on hostname, in the future perhaps fetch directly from hostname vs
-- Testing specifically for aurora
local function read_file(path)
    local file = io.open(path, "rb") -- r read mode and b binary mode
    if not file then return nil end
    local content = file:read "*a" -- *a or *all reads the whole file
    file:close()
    return content
end

local hostname = read_file("/etc/hostname")
local system_name = "sunspot"
if  string.find(hostname, "aurora.alcf.anl.gov") then
    system_name = "aurora"
end

setenv("ENV_NAME",myModuleFullName())
local pyuserbase = pathJoin(home,".local/",system_name,myModuleFullName())

setenv("PYTHONUSERBASE", pyuserbase)
unsetenv("PYTHONSTARTUP") -- ,pathJoin(conda_dir,"etc/pythonstart"))

--set flat mode as framework default
setenv("ZE_FLAT_DEVICE_HIERARCHY", "FLAT")

setenv ("CCL_PROCESS_LAUNCHER","pmix")
setenv ("HOROVOD_FUSION_THRESHOLD","150000000")
setenv ("TF_NUM_INTEROP_THREADS","1")

execute{cmd="source " .. conda_dir .. "/etc/profile.d/conda.sh;", modeA={"load"}}
execute{cmd="conda activate {{env.AURORA_PE_INSTALL_DIR}}/frameworks/{{env.AURORA_PE_FRAMEWORKS_ENV_NAME}};", modeA={"load"}}
execute{cmd="[[ -z ${ZSH_EVAL_CONTEXT} ]] && export -f " .. funcs, modeA={"load"}}
-- Unload environments and clear conda from environment
execute{cmd="for i in $(seq ${CONDA_SHLVL:=0}); do conda deactivate; done; pre=" .. conda_dir .. "; \
	export LD_LIBRARY_PATH=$(echo ${LD_LIBRARY_PATH} | tr ':' '\\n' | grep . | grep -v $pre | tr '\\n' ':' | sed 's/:$//'); \
	export PATH=$(echo ${PATH} | tr ':' '\\n' | grep . | grep -v $pre | tr '\\n' ':' | sed 's/:$//'); \
        unset -f " .. funcs .. "; \
        unset $(env | grep -o \"[^=]*CONDA[^=]*\");", modeA={"unload"}}

-- Prevent from being loaded with another frameworks conda environment
family("frameworks")


